#!/usr/bin/env bash
# This script was generated by bashly 1.0.4 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
vximg_usage() {
  if [[ -n $long_usage ]]; then
    printf "vximg - Image manipulation utilities\n"
    echo

  else
    printf "vximg - Image manipulation utilities\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  vximg COMMAND\n"
  printf "  vximg [COMMAND] --help | -h\n"
  printf "  vximg --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Upscale an image (default)\n" "$(yellow "upscale")    "
  printf "  %s   Generate bash completions\n" "$(yellow "completions")"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(cyan "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(cyan "--version, -v")"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
vximg_upscale_usage() {
  if [[ -n $long_usage ]]; then
    printf "vximg upscale - Upscale an image\n"
    echo

  else
    printf "vximg upscale - Upscale an image\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  vximg upscale DIRECTORY [OPTIONS]\n"
  printf "  vximg upscale --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(cyan "--upscaler-path, -u PATH")"
    printf "    Set the path to the upscaler binary\n"
    printf "    Default: ./scripts/realesrgan-ncnn-vulkan-20220424-$PLATFORM\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(cyan "--factor, -f FACTOR")"
    printf "    Set the upscale factor\n"
    printf "    Allowed: 4k, 8k\n"
    printf "    Default: 4k\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(cyan "--model, -m MODEL")"
    printf "    Set the upscale model\n"
    printf "    Default: realesrgan-x4plus\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(cyan "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "$(bold "Arguments:")"

    # :argument.usage
    printf "  %s\n" "$(green "DIRECTORY")"
    printf "    Path to folder containing images\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  vximg upscale .\n"
    printf "  vximg upscale . -f 8k -m realesrgan-x4plus-anime-6B\n"
    echo

  fi
}

# :command.usage
vximg_completions_usage() {
  if [[ -n $long_usage ]]; then
    printf "vximg completions\n"
    echo

    printf "  Generate bash completions\n  Usage: eval \"\$(cli completions)\"\n"
    echo

  else
    printf "vximg completions - Generate bash completions\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  vximg completions\n"
  printf "  vximg completions --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(cyan "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/send_completions.sh
send_completions() {
  echo $'# vximg completion                                         -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_vximg_completions_filter() {'
  echo $'  local words="$1"'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local result=()'
  echo $''
  echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
  echo $'    echo "$words"'
  echo $'  '
  echo $'  else'
  echo $'    for word in $words; do'
  echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
  echo $'    done'
  echo $''
  echo $'    echo "${result[*]}"'
  echo $''
  echo $'  fi'
  echo $'}'
  echo $''
  echo $'_vximg_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
  echo $'  local compline="${compwords[*]}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'upscale\'*\'--factor\')'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_vximg_completions_filter "4k 8k")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'completions\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_vximg_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'u\'*\'--factor\')'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_vximg_completions_filter "4k 8k")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'upscale\'*\'-f\')'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_vximg_completions_filter "4k 8k")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'upscale\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_vximg_completions_filter "--factor --help --model --upscaler-path -f -h -m -u")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'u\'*\'-f\')'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_vximg_completions_filter "4k 8k")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'u\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_vximg_completions_filter "--factor --help --model --upscaler-path -f -h -m -u")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_vximg_completions_filter "--help --version -h -v completions u upscale")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'complete -F _vximg_completions vximg'
  echo $''
  echo $'# ex: filetype=sh'
}

# src/lib/validations/validate_dir_exists.sh
validate_dir_exists() {
  [[ -d "$1" ]] || echo "must be an existing directory"
}

# src/lib/validations/validate_file_exists.sh
validate_file_exists() {
  [[ -f "$1" ]] || echo "must be an existing file"
}

# src/lib/validations/validate_integer.sh
validate_integer() {
  [[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

# src/lib/validations/validate_not_empty.sh
validate_not_empty() {
  [[ -z "$1" ]] && echo "must not be empty"
}

# src/lib/yaml.sh
yaml_load() {
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
  local fs

  fs=$(echo @ | tr @ '\034')

  sed -ne "s|^\($s\):|\1|" \
    -e "s|^\($s\)\($w\)$s:${s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
    -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
    }'
}

# :command.command_functions
# :command.function
vximg_upscale_command() {
  # src/upscale_command.sh
  echo "# this file is located in 'src/upscale_command.sh'"
  echo "# code for 'vximg upscale' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
vximg_completions_command() {
  # src/completions_command.sh
  # Call the `send_completions` function which was added by running:
  #
  #   $ bashly add completions
  #
  # Users can now enable bash completion for this script by running:
  #
  #   $ eval "$(cli completions)"
  #
  send_completions

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        vximg_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    upscale | u)
      action="upscale"
      shift
      vximg_upscale_parse_requirements "$@"
      shift $#
      ;;

    completions)
      action="completions"
      shift
      vximg_completions_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      vximg_usage >&2
      exit 1
      ;;

    *)
      action="upscale"
      vximg_upscale_parse_requirements "$@"
      shift $#
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
vximg_upscale_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        vximg_upscale_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="upscale"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --upscaler-path | -u)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--upscaler-path']="$2"
          shift
          shift
        else
          printf "%s\n" "--upscaler-path requires an argument: --upscaler-path, -u PATH" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --factor | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--factor']="$2"
          shift
          shift
        else
          printf "%s\n" "--factor requires an argument: --factor, -f FACTOR" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --model | -m)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--model']="$2"
          shift
          shift
        else
          printf "%s\n" "--model requires an argument: --model, -m MODEL" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['directory']+x} ]]; then
          # :argument.validations
          if [[ -n $(validate_dir_exists "$1") ]]; then
            printf "validation error in %s:\n%s\n" "DIRECTORY" "$(validate_dir_exists "$1")" >&2
            exit 1
          fi

          args['directory']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['directory']+x} ]]; then
    printf "missing required argument: DIRECTORY\nusage: vximg upscale DIRECTORY [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--upscaler-path']:-} ]] || args['--upscaler-path']="./scripts/realesrgan-ncnn-vulkan-20220424-$PLATFORM"
  [[ -n ${args['--factor']:-} ]] || args['--factor']="4k"
  [[ -n ${args['--model']:-} ]] || args['--model']="realesrgan-x4plus"

  # :command.whitelist_filter
  if [[ ${args['--factor']} ]] && [[ ! ${args['--factor']} =~ ^(4k|8k)$ ]]; then
    printf "%s\n" "--factor must be one of: 4k, 8k" >&2
    exit 1
  fi

}

# :command.parse_requirements
vximg_completions_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        vximg_completions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="completions"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.0.0-development"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "upscale") vximg_upscale_command ;;
    "completions") vximg_completions_command ;;
  esac
}

initialize
run "$@"
